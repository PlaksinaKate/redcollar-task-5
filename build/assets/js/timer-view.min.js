import{TO_TIME_DATA,SECONDS_DATA,TIME_WR,DANCE_CAT,DANCE_CAT_HIDDEN}from"./contst.min.js";class MyTimer extends HTMLElement{constructor(){super(),this.events={start:new CustomEvent("starttimer",{bubbles:!0}),pause:new CustomEvent("pausetimer",{bubbles:!0}),reset:new CustomEvent("resettimer",{bubbles:!0}),end:new CustomEvent("endtimer",{bubbles:!0,composed:!0})},this.interval}connectedCallback(){this._timeWr=document.createElement("div"),this._timeWr.classList.add(TIME_WR),this._timeWr._shadow=this._timeWr.attachShadow({mode:"closed"});const e=this.getAttribute(TO_TIME_DATA),t=this.getAttribute(SECONDS_DATA),s=t?this.getSeconds(t):this.getToTimeSeconds(e);this._timeWr._shadow.innerHTML=this.renderTime(s),this.append(this._timeWr);const i=this.nextSibling.nextElementSibling,r=i.querySelector(".btn_start"),n=i.querySelector(".btn_pause"),a=i.querySelector(".btn_reset");this.addEventListener("starttimer",this.startTimer(this)),this.addEventListener("pausetimer",this.pauseTimer(this)),this.addEventListener("resettimer",this.resetTimer(this)),window.addEventListener("endtimer",(()=>this.endTimer())),r.addEventListener("click",(()=>{this.dispatchEvent(this.events.start)})),n.addEventListener("click",(()=>{this.dispatchEvent(this.events.pause)})),a.addEventListener("click",(()=>{this.dispatchEvent(this.events.reset)}))}static get observedAttributes(){return[TO_TIME_DATA,SECONDS_DATA]}attributeChangedCallback(e,t,s){let i;switch(e){case"to-time":i=this.getToTimeSeconds(s),this._timeWr&&(this._timeWr._shadow.innerHTML=this.renderTime(i));break;case"seconds":i=this.getSeconds(s),this._timeWr&&(this._timeWr._shadow.innerHTML=this.renderTime(i))}}renderTime(e){const t=new Date,s=e-(3600*t.getHours()+60*t.getMinutes()+t.getSeconds()),i=s<0?86400-Math.abs(s):s;return this.secondsConverter(i)}getToTimeSeconds(e){let t,s,i=0;return 3===e.split(":").length?(t=parseInt(e.split(":")[2]),s=parseInt(e.split(":")[1]),i=parseInt(e.split(":")[0])):(t=parseInt(e.split(":")[1]),s=parseInt(e.split(":")[0])),3600*i+60*s+t}getSeconds(e){const t=new Date,s=parseInt(e);return 3600*t.getHours()+60*t.getMinutes()+t.getSeconds()+s}secondsConverter(e){let t=(e%60).toString(),s=Math.floor(e/60%60).toString(),i=Math.floor(e/60/60%60).toString();return"0"!==i?`${i.padStart(2,"0")}:${s.padStart(2,"0")}:${t.padStart(2,"0")}`:`${s.padStart(2,"0")}:${t.padStart(2,"0")}`}startTimer=e=>()=>{0!=e.getToTimeSeconds(e._timeWr._shadow.innerHTML)&&(e.interval=setInterval((()=>{const t=e.getToTimeSeconds(e._timeWr._shadow.innerHTML);if(0===t)return clearInterval(e.interval),void e.dispatchEvent(this.events.end);e._timeWr._shadow.innerHTML=e.secondsConverter(t-1)}),1e3))};pauseTimer=e=>()=>{clearInterval(e.interval)};resetTimer=e=>()=>{clearInterval(e.interval);const t=e.getAttribute(TO_TIME_DATA),s=e.getAttribute(SECONDS_DATA);e._timeWr._shadow.innerHTML=s?e.renderTime(e.getSeconds(s)):e.renderTime(e.getToTimeSeconds(t))};endTimer(){const e=document.getElementsByClassName(DANCE_CAT)[0];e.classList.remove(DANCE_CAT_HIDDEN),setTimeout((()=>{e.classList.add(DANCE_CAT_HIDDEN)}),6e3)}}customElements.define("timer-view",MyTimer);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXItdmlldy5taW4uanMiLCJuYW1lcyI6WyJUT19USU1FX0RBVEEiLCJTRUNPTkRTX0RBVEEiLCJUSU1FX1dSIiwiREFOQ0VfQ0FUIiwiREFOQ0VfQ0FUX0hJRERFTiIsIk15VGltZXIiLCJIVE1MRWxlbWVudCIsImNvbnN0cnVjdG9yIiwic3VwZXIiLCJ0aGlzIiwiZXZlbnRzIiwic3RhcnQiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJwYXVzZSIsInJlc2V0IiwiZW5kIiwiY29tcG9zZWQiLCJpbnRlcnZhbCIsImNvbm5lY3RlZENhbGxiYWNrIiwiX3RpbWVXciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsIl9zaGFkb3ciLCJhdHRhY2hTaGFkb3ciLCJtb2RlIiwidG9UaW1lVmFsdWUiLCJnZXRBdHRyaWJ1dGUiLCJzZWNvbmRzVmFsdWUiLCJ2YWx1ZSIsImdldFNlY29uZHMiLCJnZXRUb1RpbWVTZWNvbmRzIiwiaW5uZXJIVE1MIiwicmVuZGVyVGltZSIsImFwcGVuZCIsImJ0bnNXciIsIm5leHRTaWJsaW5nIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiYnRuU3RhcnQiLCJxdWVyeVNlbGVjdG9yIiwiYnRuUGF1c2UiLCJidG5SZXNldCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdGFydFRpbWVyIiwicGF1c2VUaW1lciIsInJlc2V0VGltZXIiLCJ3aW5kb3ciLCJlbmRUaW1lciIsImRpc3BhdGNoRXZlbnQiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJuYW1lIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsInNlY29uZHNMZWZ0IiwiZGF0ZSIsIkRhdGUiLCJub3dTZWNvbmRzTGVmdCIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsIm5vd1NlY29uZHNMZWZ0VmFsdWUiLCJNYXRoIiwiYWJzIiwic2Vjb25kc0NvbnZlcnRlciIsInRvVGltZSIsInMiLCJtIiwiaCIsInNwbGl0IiwibGVuZ3RoIiwicGFyc2VJbnQiLCJzZWNvbmRzIiwiaW50U2Vjb25kcyIsInRvU3RyaW5nIiwiZmxvb3IiLCJwYWRTdGFydCIsInRpbWVyIiwic2V0SW50ZXJ2YWwiLCJ0aW1lU2Vjb25kcyIsImNsZWFySW50ZXJ2YWwiLCJkYW5jZUNhdCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJyZW1vdmUiLCJzZXRUaW1lb3V0IiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiXSwic291cmNlcyI6WyJ0aW1lci12aWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRPX1RJTUVfREFUQSwgU0VDT05EU19EQVRBLCBUSU1FX1dSLCBEQU5DRV9DQVQsIERBTkNFX0NBVF9ISURERU4gfSBmcm9tICcuL2NvbnRzdC5taW4uanMnXG5cbmNsYXNzIE15VGltZXIgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKClcblxuICAgIHRoaXMuZXZlbnRzID0ge1xuICAgICAgXCJzdGFydFwiOiBuZXcgQ3VzdG9tRXZlbnQoXCJzdGFydHRpbWVyXCIsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIH0pLFxuICAgICAgXCJwYXVzZVwiOiBuZXcgQ3VzdG9tRXZlbnQoXCJwYXVzZXRpbWVyXCIsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIH0pLFxuICAgICAgXCJyZXNldFwiOiBuZXcgQ3VzdG9tRXZlbnQoXCJyZXNldHRpbWVyXCIsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIH0pLFxuICAgICAgXCJlbmRcIjogbmV3IEN1c3RvbUV2ZW50KFwiZW5kdGltZXJcIiwge1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgIH0pLFxuICAgIH07XG5cbiAgICB0aGlzLmludGVydmFsO1xuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5fdGltZVdyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB0aGlzLl90aW1lV3IuY2xhc3NMaXN0LmFkZChUSU1FX1dSKVxuXG4gICAgdGhpcy5fdGltZVdyLl9zaGFkb3cgPSB0aGlzLl90aW1lV3IuYXR0YWNoU2hhZG93KHsgbW9kZTogJ2Nsb3NlZCcgfSlcblxuICAgIGNvbnN0IHRvVGltZVZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUoVE9fVElNRV9EQVRBKVxuICAgIGNvbnN0IHNlY29uZHNWYWx1ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKFNFQ09ORFNfREFUQSlcbiAgICBjb25zdCB2YWx1ZSA9IHNlY29uZHNWYWx1ZSA/IHRoaXMuZ2V0U2Vjb25kcyhzZWNvbmRzVmFsdWUpIDogdGhpcy5nZXRUb1RpbWVTZWNvbmRzKHRvVGltZVZhbHVlKVxuICAgIHRoaXMuX3RpbWVXci5fc2hhZG93LmlubmVySFRNTCA9IHRoaXMucmVuZGVyVGltZSh2YWx1ZSlcblxuICAgIHRoaXMuYXBwZW5kKHRoaXMuX3RpbWVXcilcblxuICAgIGNvbnN0IGJ0bnNXciA9IHRoaXMubmV4dFNpYmxpbmcubmV4dEVsZW1lbnRTaWJsaW5nLFxuICAgICAgICAgIGJ0blN0YXJ0ID0gYnRuc1dyLnF1ZXJ5U2VsZWN0b3IoJy5idG5fc3RhcnQnKSxcbiAgICAgICAgICBidG5QYXVzZSA9IGJ0bnNXci5xdWVyeVNlbGVjdG9yKCcuYnRuX3BhdXNlJyksXG4gICAgICAgICAgYnRuUmVzZXQgPSBidG5zV3IucXVlcnlTZWxlY3RvcignLmJ0bl9yZXNldCcpO1xuICAgIFxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignc3RhcnR0aW1lcicsIHRoaXMuc3RhcnRUaW1lcih0aGlzKSlcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3BhdXNldGltZXInLCB0aGlzLnBhdXNlVGltZXIodGhpcykpXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdyZXNldHRpbWVyJywgdGhpcy5yZXNldFRpbWVyKHRoaXMpKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdlbmR0aW1lcicsICgpID0+IHRoaXMuZW5kVGltZXIoKSlcblxuICAgIGJ0blN0YXJ0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHRoaXMuZXZlbnRzLnN0YXJ0KVxuICAgIH0pXG4gICAgXG4gICAgYnRuUGF1c2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQodGhpcy5ldmVudHMucGF1c2UpXG4gICAgfSlcblxuICAgIGJ0blJlc2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHRoaXMuZXZlbnRzLnJlc2V0KVxuICAgIH0pXG5cbiAgfVxuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiBbVE9fVElNRV9EQVRBLCBTRUNPTkRTX0RBVEFdO1xuICB9XG5cbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgIGxldCBzZWNvbmRzTGVmdFxuICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgY2FzZSBcInRvLXRpbWVcIjpcbiAgICAgICAgc2Vjb25kc0xlZnQgPSB0aGlzLmdldFRvVGltZVNlY29uZHMobmV3VmFsdWUpXG4gICAgICAgIGlmICh0aGlzLl90aW1lV3IpIHRoaXMuX3RpbWVXci5fc2hhZG93LmlubmVySFRNTCA9IHRoaXMucmVuZGVyVGltZShzZWNvbmRzTGVmdClcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJzZWNvbmRzXCI6XG4gICAgICAgIHNlY29uZHNMZWZ0ID0gdGhpcy5nZXRTZWNvbmRzKG5ld1ZhbHVlKVxuICAgICAgICBpZiAodGhpcy5fdGltZVdyKSB0aGlzLl90aW1lV3IuX3NoYWRvdy5pbm5lckhUTUwgPSB0aGlzLnJlbmRlclRpbWUoc2Vjb25kc0xlZnQpXG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICB9XG5cbiAgcmVuZGVyVGltZSh2YWx1ZSkge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpXG4gICAgY29uc3Qgbm93U2Vjb25kcyA9IGRhdGUuZ2V0SG91cnMoKSAqIDM2MDAgKyBkYXRlLmdldE1pbnV0ZXMoKSAqIDYwICsgZGF0ZS5nZXRTZWNvbmRzKCk7XG4gICAgY29uc3Qgbm93U2Vjb25kc0xlZnQgPSB2YWx1ZSAtIG5vd1NlY29uZHNcbiAgICBjb25zdCBub3dTZWNvbmRzTGVmdFZhbHVlID0gbm93U2Vjb25kc0xlZnQgPCAwID8gODY0MDAgLSBNYXRoLmFicyhub3dTZWNvbmRzTGVmdCkgOiBub3dTZWNvbmRzTGVmdFxuICAgIHJldHVybiB0aGlzLnNlY29uZHNDb252ZXJ0ZXIobm93U2Vjb25kc0xlZnRWYWx1ZSk7XG4gIH1cblxuICBnZXRUb1RpbWVTZWNvbmRzKHRvVGltZSkge1xuICAgIGxldCBzLCBtLCBoID0gMDtcbiAgICBpZiAodG9UaW1lLnNwbGl0KCc6JykubGVuZ3RoID09PSAzKSB7XG4gICAgICBzID0gcGFyc2VJbnQodG9UaW1lLnNwbGl0KCc6JylbMl0pO1xuICAgICAgbSA9IHBhcnNlSW50KHRvVGltZS5zcGxpdCgnOicpWzFdKTtcbiAgICAgIGggPSBwYXJzZUludCh0b1RpbWUuc3BsaXQoJzonKVswXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMgPSBwYXJzZUludCh0b1RpbWUuc3BsaXQoJzonKVsxXSk7XG4gICAgICBtID0gcGFyc2VJbnQodG9UaW1lLnNwbGl0KCc6JylbMF0pO1xuICAgIH1cblxuICAgIHJldHVybiBoICogMzYwMCArIG0gKiA2MCArIHNcbiAgfVxuXG4gIGdldFNlY29uZHMoc2Vjb25kcykge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpXG4gICAgY29uc3QgaW50U2Vjb25kcyA9IHBhcnNlSW50KHNlY29uZHMpXG5cbiAgICByZXR1cm4gKGRhdGUuZ2V0SG91cnMoKSAqIDM2MDAgKyBkYXRlLmdldE1pbnV0ZXMoKSAqIDYwICsgZGF0ZS5nZXRTZWNvbmRzKCkpICsgaW50U2Vjb25kc1xuICB9XG5cbiAgc2Vjb25kc0NvbnZlcnRlcihzZWNvbmRzKSB7XG4gICAgbGV0IHMgPSAoc2Vjb25kcyAlIDYwKS50b1N0cmluZygpLFxuICAgICAgbSA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDYwICUgNjApLnRvU3RyaW5nKCksXG4gICAgICBoID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gNjAgLyA2MCAlIDYwKS50b1N0cmluZygpO1xuXG4gICAgcmV0dXJuIGggIT09ICcwJyA/IGAke2gucGFkU3RhcnQoMiwgJzAnKX06JHttLnBhZFN0YXJ0KDIsICcwJyl9OiR7cy5wYWRTdGFydCgyLCAnMCcpfWAgOiBgJHttLnBhZFN0YXJ0KDIsICcwJyl9OiR7cy5wYWRTdGFydCgyLCAnMCcpfWA7XG4gIH1cblxuICBzdGFydFRpbWVyID0gKHRpbWVyKSA9PiAoKSA9PiB7XG4gICAgaWYgKHRpbWVyLmdldFRvVGltZVNlY29uZHModGltZXIuX3RpbWVXci5fc2hhZG93LmlubmVySFRNTCkgIT0gMCkge1xuICAgICAgdGltZXIuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRpbWVTZWNvbmRzID0gdGltZXIuZ2V0VG9UaW1lU2Vjb25kcyh0aW1lci5fdGltZVdyLl9zaGFkb3cuaW5uZXJIVE1MKVxuXG4gICAgICAgIGlmICh0aW1lU2Vjb25kcyA9PT0gMCkge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIuaW50ZXJ2YWwpXG4gICAgICAgICAgdGltZXIuZGlzcGF0Y2hFdmVudCh0aGlzLmV2ZW50cy5lbmQpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICB0aW1lci5fdGltZVdyLl9zaGFkb3cuaW5uZXJIVE1MID0gdGltZXIuc2Vjb25kc0NvbnZlcnRlcih0aW1lU2Vjb25kcyAtIDEpO1xuICAgICAgfSwgMTAwMClcbiAgICB9XG4gIH1cblxuICBwYXVzZVRpbWVyID0gKHRpbWVyKSA9PiAoKSA9PiB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aW1lci5pbnRlcnZhbClcbiAgfVxuXG4gIHJlc2V0VGltZXIgPSAodGltZXIpID0+ICgpID0+IHtcbiAgICBjbGVhckludGVydmFsKHRpbWVyLmludGVydmFsKVxuICAgIGNvbnN0IHRvVGltZSA9IHRpbWVyLmdldEF0dHJpYnV0ZShUT19USU1FX0RBVEEpXG4gICAgY29uc3Qgc2Vjb25kcyA9IHRpbWVyLmdldEF0dHJpYnV0ZShTRUNPTkRTX0RBVEEpXG4gICAgdGltZXIuX3RpbWVXci5fc2hhZG93LmlubmVySFRNTCA9IHNlY29uZHMgPyB0aW1lci5yZW5kZXJUaW1lKHRpbWVyLmdldFNlY29uZHMoc2Vjb25kcykpIDogdGltZXIucmVuZGVyVGltZSh0aW1lci5nZXRUb1RpbWVTZWNvbmRzKHRvVGltZSkpXG4gIH1cblxuICBlbmRUaW1lcigpIHtcbiAgICBjb25zdCBkYW5jZUNhdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoREFOQ0VfQ0FUKVswXVxuICAgIGRhbmNlQ2F0LmNsYXNzTGlzdC5yZW1vdmUoREFOQ0VfQ0FUX0hJRERFTilcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZGFuY2VDYXQuY2xhc3NMaXN0LmFkZChEQU5DRV9DQVRfSElEREVOKVxuICAgIH0sIDYwMDApXG4gIH1cblxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3RpbWVyLXZpZXcnLCBNeVRpbWVyKTtcbiJdLCJtYXBwaW5ncyI6Ik9BQVNBLGFBQWNDLGFBQWNDLFFBQVNDLFVBQVdDLHFCQUF3QixrQkFFakYsTUFBTUMsZ0JBQWdCQyxZQUNwQixXQUFBQyxHQUNFQyxRQUVBQyxLQUFLQyxPQUFTLENBQ1pDLE1BQVMsSUFBSUMsWUFBWSxhQUFjLENBQ3JDQyxTQUFTLElBRVhDLE1BQVMsSUFBSUYsWUFBWSxhQUFjLENBQ3JDQyxTQUFTLElBRVhFLE1BQVMsSUFB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
