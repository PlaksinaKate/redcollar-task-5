import{TO_TIME_DATA,SECONDS_DATA,TIME_WR,DANCE_CAT,DANCE_CAT_HIDDEN}from"./contst.min.js";class MyTimer extends HTMLElement{constructor(){super(),this.events={start:new CustomEvent("starttimer",{bubbles:!0}),pause:new CustomEvent("pausetimer",{bubbles:!0}),reset:new CustomEvent("resettimer",{bubbles:!0}),end:new CustomEvent("endtimer",{bubbles:!0,composed:!0})},this.interval}connectedCallback(){this._timeWr=document.createElement("div"),this._timeWr.classList.add(TIME_WR),this._timeWr._shadow=this._timeWr.attachShadow({mode:"closed"});const e=this.getAttribute(TO_TIME_DATA),t=this.getAttribute(SECONDS_DATA),s=t?this.getSeconds(t):this.getToTimeSeconds(e);this._timeWr._shadow.innerHTML=this.renderTime(s),this.append(this._timeWr);const i=this.nextSibling.nextElementSibling,r=i.querySelector(".btn_start"),n=i.querySelector(".btn_pause"),a=i.querySelector(".btn_reset");this.addEventListener("starttimer",this.startTimer(this)),this.addEventListener("pausetimer",this.pauseTimer(this)),this.addEventListener("resettimer",this.resetTimer(this)),window.addEventListener("endtimer",this.endTimer),r.addEventListener("click",(()=>{this.dispatchEvent(this.events.start)})),n.addEventListener("click",(()=>{this.dispatchEvent(this.events.pause)})),a.addEventListener("click",(()=>{this.dispatchEvent(this.events.reset)}))}static get observedAttributes(){return[TO_TIME_DATA,SECONDS_DATA]}attributeChangedCallback(e,t,s){let i;switch(e){case"to-time":i=this.getToTimeSeconds(s),this._timeWr&&(this._timeWr._shadow.innerHTML=this.renderTime(i));break;case"seconds":i=this.getSeconds(s),this._timeWr&&(this._timeWr._shadow.innerHTML=this.renderTime(i))}}renderTime(e){const t=new Date,s=e-(3600*t.getHours()+60*t.getMinutes()+t.getSeconds()),i=s<0?86400-Math.abs(s):s;return this.secondsConverter(i)}getToTimeSeconds(e){let t,s,i=0;return 3===e.split(":").length?(t=parseInt(e.split(":")[2]),s=parseInt(e.split(":")[1]),i=parseInt(e.split(":")[0])):(t=parseInt(e.split(":")[1]),s=parseInt(e.split(":")[0])),3600*i+60*s+t}getSeconds(e){const t=new Date,s=parseInt(e);return 3600*t.getHours()+60*t.getMinutes()+t.getSeconds()+s}secondsConverter(e){let t=(e%60).toString(),s=Math.floor(e/60%60).toString(),i=Math.floor(e/60/60%60).toString();return"0"!==i?`${i.padStart(2,"0")}:${s.padStart(2,"0")}:${t.padStart(2,"0")}`:`${s.padStart(2,"0")}:${t.padStart(2,"0")}`}startTimer=e=>()=>{0!=e.getToTimeSeconds(e._timeWr._shadow.innerHTML)&&(e.interval=setInterval((()=>{const t=e.getToTimeSeconds(e._timeWr._shadow.innerHTML);if(0===t)return clearInterval(e.interval),void e.dispatchEvent(this.events.end);e._timeWr._shadow.innerHTML=e.secondsConverter(t-1)}),1e3))};pauseTimer=e=>()=>{clearInterval(e.interval)};resetTimer=e=>()=>{clearInterval(e.interval);const t=e.getAttribute(TO_TIME_DATA),s=e.getAttribute(SECONDS_DATA);e._timeWr._shadow.innerHTML=s?e.renderTime(e.getSeconds(s)):e.renderTime(e.getToTimeSeconds(t))};endTimer(){const e=document.getElementsByClassName(DANCE_CAT)[0];e.classList.remove(DANCE_CAT_HIDDEN),setTimeout((()=>{e.classList.add(DANCE_CAT_HIDDEN)}),6e3)}}customElements.define("timer-view",MyTimer);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
